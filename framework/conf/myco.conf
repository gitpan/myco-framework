#!/usr/bin/perl
#   note: above bang-path is present just to make emacs cperl mode happy
###########################################################################
# Myco configuration file.
#
###########################################################################

  randy => { # Constants used by the randy server and client.
            RANDY_PORT   => 6288,
            RANDY_HOST   => 'localhost',
           },

  apache => { # Constants used for modules that do stuff related to Apache.
             APACHE_USER  => 'www',
             APACHE_GROUP => 'www'
            },

  auth => { # Constants used for session authentication
	   # backend: sql|ldap  default: sql
	   AUTH_BACKEND => 'sql',

	   # UI restrictions for low-level users
	   AUTH_UI_RESTRICTIONS => [qw( /o/identiprov )],
          },

  roles => { # Access control roles, see Myco::User
            #   The special role 'admin' always exists

            # 'master' and 'servent' are currently used in unit tests
            master  => { name  => 'master',
                         disp_name => 'Master'
                       },
            servant => { name => 'servant',
                         disp_name => 'Servant'
                       },
           },

  test => { # test servers for LDAP and IMAP
	   TEST_IMAP_SERVER => '',
	   TEST_LDAP_SERVER => '',
	  },

  imap => { # Constants used for IMAP server administration
	   IMAP_SERVER => '',
	   IMAP_ADMIN_NAME => '',
	   IMAP_ADMIN_PASS => '',
	  },

  ldap => { # Constants used for LDAP server administration
	   LDAP_BASE_PERSON_DN => '',
	   LDAP_BASE_ADDR_DN => '',
	   LDAP_SERVER => '',
	   LDAP_ADMIN_DN => '',
	   LDAP_ADMIN_PASS => '',
	   LDAP_PASS_SECRET => '',

	   # default object classes
	   LDAP_OBJECT_CLASSES => [ qw() ],

	   # mapping Myco::Person to LDAP attribtues
	   MYCO_TO_LDAP => {
			    first => 'givenName',
			    last => 'sn',
			    home_phone => 'homePhone',
			    work_phone => 'telephoneNumber',
			    street => 'street',
			    zip => 'postalCode',
			    state => 'st',
			    city => 'l',
			    unique_id => 'uniquePersonId',
			   },
	  },

  evlog => { # Object event logging (just 'write' logging at present)

            # Master logging system on/off switch 
            EVLOG => 0,
            EVLOG_CLASSES => # Log events for these classes
            [
             qw(
                Myco::FooClass
               )
            ],
           },
